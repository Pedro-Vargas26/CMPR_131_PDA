
/*


Chapter 2 assignments, done in collaboration with
Daisy Ramon, Anthony Herrera, and Pedro Vargas.


*/


#include <iostream>
#include <string>
#include <iomanip>
#include "input.h"
#include "Quadratic.h"
#include "PseudoRandom.h"
#include "Rational.h"




using namespace std;
using std::cout;


void RationalMenu();

void EnterR1(Rational& r1);
void EnterR2(Rational& r2);
char menuOption();



void quadraticMenu();
void pseudoRandomMenu();

int main()
{
    do
    {
        switch (menuOption())
        {
        case 'X': exit(0); break;
        case '1': quadraticMenu(); break;
        case '2': pseudoRandomMenu(); break;
        case '3': RationalMenu(); break;

        default: cout << "\t\tERROR - Invalid option. Please re-enter."; break;
        }
        cout << "\n";
        system("pause");
    } while (true);
    return EXIT_SUCCESS;

}

char menuOption()
{
    system("cls");
    cout << "\n\tCMPR131 Chapter2 - ADT Assignments by Pedro Vargas (9/6/2025)";
    cout << "\n\t" << string(105, char(205));
    cout << "\n\t1> Quadratic Expression";
    cout << "\n\t2> Pseudorandom";
    cout << "\n\t3> Rational number";
    cout << "\n\t" << string(105, char(196));
    cout << "\n\tX.Exit";
    cout << "\n\t" << string(105, char(205));

    return toupper(inputChar("\n\tOption: "));

}

void EnterR1(Rational& r1)
{
    r1.setNumerator(inputInteger("\n\tEnter numerator for r1: "));

    while (true)
    {
        try
        {
            r1.setDenominator(inputInteger("\n\tEnter Denominator for r1: "));
            break;
        }
        catch (const Rational::divisionByZero& e)
        {
            cerr << e.what();
        }
    }

    r1.normalize();

}

void EnterR2(Rational& r2)
{
    r2.setNumerator(inputInteger("\n\tEnter numerator for r2: "));
    while (true)
    {
        try
        {
            r2.setDenominator(inputInteger("\n\tEnter Denominator for r2: "));
            break;
        }
        catch (const Rational::divisionByZero& e)
        {
            cerr << e.what();
        }
    }

    r2.normalize();

}


void RationalMenu()
{
    Rational r1, r2;

    while (true)
    {
        system("cls");
        cout << "\n\t3> Rational Number menu";
        cout << "\n\t" << string(105, char(205));
        cout << "\n\tA.enter values of rational number R1"
            << "\n\tB.display R1"
            << "\n\tC.enter values for  rational number R2"
            << "\n\tD.display R2"
            << "\n\tE.multiplication of 2 rational numbers(R1 * R2)"
            << "\n\tF.division of 2 rational numbers(R1 / R2)"
            << "\n\tG.addition of 2 rational numbers(R1 + R2)"
            << "\n\tH.subtraction 2 rational numbers(R1 - R2)"
            << "\n\tI. (R1 == R2)"
            << "\n\tJ. (R1 < R2)";
        cout << "\n\t" << string(105, char(196));
        cout << "\n\t0. Return";
        cout << "\n\t" << string(105, char(205));

        char optionR = toupper(inputChar("\n\tOption: "));

        switch (optionR)
        {
        case '0':
            cout << "\n\tReturn to main menu\n";
            return;
        case'A': EnterR1(r1); break;

        case 'B':
        {
            cout << "\n\tRational number R1: " << r1; break;
        }

        case 'C': EnterR2(r2); break;
        case 'D':
        {
            cout << "\n\tRational number R2: " << r2; break;
        }


        case 'E':
        {
            cout << "\n\tR1 * R2: " << (r1 * r2); break;
        }

        case 'F':
        {
            cout << "\n\tR1 / R2: " << (r1 / r2); break;
        }

        case 'G':
        {
            cout << "\n\tR1 + R2: " << (r1 + r2); break;
        }

        case 'H':
        {
            cout << "\n\tR1 - R2: " << (r1 - r2); break;
        }

        case 'I':
        {
            cout << "\n\tR1 == R2: " << (r1 == r2 ? "true" : "false") << endl; break;
        }

        case 'J':
        {
            cout << "\n\tR1 < R2: " << (r1 < r2 ? "true" : "false") << endl; break;
        }
        default:
            cout << "\n\tInvalid choice.\n";

        }

        cout << "\n\n";
        system("pause");
    }

}

void quadraticMenu() {
    Quadratic q;
    int val, root1, root2;
    char option;

    while (true) {
        system("cls");
        cout << "\n\t1> Quadratic Menu";
        cout << "\n\t" << string(105, char(205));
        cout << "\n\tD. display the expression";
        cout << "\n\tA. set coefficient (a)";
        cout << "\n\tB. set coefficient (b)";
        cout << "\n\tC. set coefficient (c)";
        cout << "\n\tE. get evaluation (x)";
        cout << "\n\tN. get the number of real roots";
        cout << "\n\tR. get real root(s)";
        cout << "\n\t" << string(105, char(196));
        cout << "\n\t0. return";
        cout << "\n\t" << string(105, char(205));;
        char option = toupper(inputChar("\n\tEnter a choice: "));

        switch (option)
        {
        case 'A':
            val = inputInteger("\n\tEnter a: ");
            q.setA(val);
            break;
        case 'B':
            val = inputInteger("\n\tEnter b: ");
            q.setB(val);
            break;
        case 'C':
            val = inputInteger("\n\tEnter c ");
            q.setC(val);
            break;
        case 'D':
            q.display();
            break;
        case 'E':
            val = inputInteger("\n\tEnter x ");
            cout << "\n\tEvaluation result: " << q.evaluate(val) << endl;
            system("pause");
            break;
        case 'N':
            cout << "\n\tNumber of real roots: " << q.numberOfRealRoots() << endl;
            system("pause");
            break;
        case 'R':
            if (q.numberOfRealRoots() > 0) {
                q.realRoots(root1, root2);
                if (root1 == root2)
                    cout << "\n\tOne real root: x = " << root1 << endl;
                else
                    cout << "\n\tTwo real roots: x1 = " << root1 << ", x2 = " << root2 << endl;
            }
            else {
                cout << "\n\tNo real roots.\n";
            }
            system("pause");
            break;
        case '0':
            cout << "\n\tReturn to main menu\n";
            return;
        default:
            cout << "\n\tInvalid choice.\n";
            system("pause");
        }
    }
}




void pseudoRandomMenu() {
    const char INDENT = '\t';
    char choice = 'A';
    double intervals = 10.0;
    int revolutions = 10000;
    unordered_map<int, double> standard_dis;
    PseudoRandom pr;
    do {
        system("cls");
        cout << INDENT << "2 > Pseudorandom menu\n";
        cout << INDENT << string(80, char(205)) << endl;
        cout << INDENT << "A.get seed\n";
        cout << INDENT << "B.set seed\n";
        cout << INDENT << "C.get multiplier\n";
        cout << INDENT << "D.set multiplier\n";
        cout << INDENT << "E.get modulus\n";
        cout << INDENT << "F.set modulus\n";
        cout << INDENT << "G.get increment\n";
        cout << INDENT << "H.set increment\n";
        cout << INDENT << "I.get next number\n";
        cout << INDENT << "J.get indirect next number\n";
        cout << INDENT << "K.run experiment with different values(mutliplier, increment, and modulus)\n";
        cout << INDENT << string(80, (char)196) << endl;
        cout << INDENT << "0. return\n";
        cout << INDENT << string(80, char(205)) << endl;
        choice = inputChar("\tOption :", "ABCDEFGHIJK0");
        choice = toupper(choice);
        switch (choice) {
        case '0':
            cout << "\n\tReturn to main menu\n";

        case 'A':
            cout << "\n" << INDENT << "Seed:\t" << pr.getSeed();
            break;
        case 'B':
            pr.setSeed(inputInteger("\n\tEnter seed:\t", true));
            break;
        case 'C':
            cout << "\n" << INDENT << "Multiplier:\t" << pr.getMultiplier();
            break;
        case 'D':
            pr.setMultiplier(inputInteger("\n\tEnter Multiplier:\t", true));
            break;
        case 'E':
            cout << "\n" << INDENT << "Modulo:\t" << pr.getModulo();
            break;
        case 'F':
            pr.setModulo(inputInteger("\n\tEnter Modulo:\t", true));
            break;
        case 'G':
            cout << "\n" << INDENT << "Increment:\t" << pr.getIncrement();
            break;
        case 'H':
            pr.setIncrement(inputInteger("\n\tEnter Increment:\t", true));
            break;
        case 'I':
            cout << "\n" << INDENT << "Next number:\t" << pr.getInt();
            break;
        case 'J':
            cout << "\n" << INDENT << "Indirect Next Number:\t" << pr.getIndirectNext();
            break;
        case 'K':
            standard_dis = pr.uniformDistribution(revolutions, (int)intervals);

            cout << "\n\n" << INDENT << "Multipler: " << pr.getMultiplier() << endl;
            cout << INDENT << "Modulo: " << pr.getModulo() << endl;
            cout << INDENT << "Increment: " << pr.getIncrement() << endl;
            cout << "\n";
            for (int i = 0; i < (int)intervals; i++)
                cout << INDENT << "(" << ((double)i / intervals) << "..." << ((double)((i + 1) / intervals)) << "):\t" << setw(10) << standard_dis[i] << "%" << endl;

            cout << "\n\n" << INDENT << "With 10 uniformly distributed rand number in the range[0...1.0), ";
            cout << "\n" << INDENT << "the approximate Gaussian distribution " << pr.gaussianApproximation(revolutions * .5, (intervals / 100.0), (int)intervals) << "\n\n";
            break;
        default:
            cout << "\n\tInvalid choice.\n";
            system("pause");
        }
        cout << "\n\n\t";
        system("pause");
    } while (true);
}
